buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 10


def createCompileArgsWithClasspath(List<String> ignoreModules, String classpath) {
    def toModule = []
    def classpathArray = classpath.split(":")
    classpathArray.each {item ->
        if (!ignoreModules.any {ignoreModulePart -> item.contains(ignoreModulePart)}) {
            toModule.add(item)
        }

    }
    return ['--module-path', toModule.join(":")]
}
compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath, 
        ]

//        options.compilerArgs = createCompileArgsWithClasspath( ['ribbon-loadbalancer', "ribbon-core", "ribbon", "jsr305", "javax.annotation-api"], classpath.asPath)
        println(options.compilerArgs)
    }
}




repositories {
    mavenCentral()
}


ext {
    springCloudVersion = 'Finchley.SR1'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('org.springframework.cloud:spring-cloud-starter-openfeign')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
