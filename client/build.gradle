import java.nio.file.Files

buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
plugins {
    id 'ru.vyarus.quality' version '3.1.1'
}
apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

quality {
    pmd = false
    exclude '**/module-info.java' //important! checkstyle cant parse module-info
//    findbugs = false // false to disable automatic plugin activation
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 10

static def createCompileArgsWithPatchArgs(Map<String, List<String>> patchMap, List<String> modulePath) {
    def toPatch = []
    def patchedLibPaths = []
    patchMap.entrySet().forEach { entry ->
        def patchLibPaths = []
        entry.value.each { sourcesModules ->
            def foundedPath = modulePath.find { item -> item.contains(sourcesModules) }
            if (foundedPath != null) {
                patchedLibPaths.add(foundedPath)
                patchLibPaths.add(foundedPath)
            }
        }
        if (!patchLibPaths.isEmpty()) {
            toPatch.add("--patch-module")
            toPatch.add("${entry.key}=${patchLibPaths.join(":")}")
        }
    }
    modulePath.removeIf { item -> patchedLibPaths.contains(item) }
    return toPatch
}

static def createCompileArgsWithClasspath(List<String> ignoreModules, String classpath) {
    def toModule = []
    def classpathArray = classpath.split(":")
    def toClasspath = []
    classpathArray.each { item ->
        if (!ignoreModules.any { ignoreModulePart -> item.contains(ignoreModulePart) }) {
            toModule.add(item)
        } else {
            toClasspath.add(item)
        }

    }
    return toModule
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        def toClasspathList = ['ribbon-loadbalancer',
                               "ribbon-core",
                               "ribbon-transport",
                               "ribbon-httpclient",
                               "stax-api",
                               "java-xml",
                               "spring-aop",
                               "aopalliance",
                               "ribbon",
                               "xmlpull",
                               "bson",
                               "mongodb-driver",
                               "mongodb-driver-core",
                               "xpp3_min",
                               "jsr305",
                               "javax.annotation-api"]
        def toModulePath = createCompileArgsWithClasspath(toClasspathList, classpath.asPath)
        def toPatch = createCompileArgsWithPatchArgs(['jaxb-impl':['jaxb-core']], toModulePath)

        def modulePath = ['--module-path', toModulePath.join(":")]
        options.compilerArgs = modulePath + toPatch
    }
}

compileTestJava {
    doFirst {

        def toClasspathList = ['ribbon-loadbalancer',
                               "ribbon-core",
                               "ribbon-transport",
                               "ribbon-httpclient",
                               "stax-api",
                               "java-xml",
                               "spring-aop",
                               "aopalliance",
                               "ribbon",
                               "xmlpull",
                               "bson",
                               "mongodb-driver",
                               "mongodb-driver-core",
                               "jsonassert",
                               "android-json ",
                               "xpp3_min",
                               "jsr305",
                               "javax.annotation-api"]
        def toModulePath = createCompileArgsWithClasspath(toClasspathList, classpath.asPath)
        def toPatch = createCompileArgsWithPatchArgs([
                'hamcrest-core':['hamcrest-library'],
                 'jaxb.impl': ['jaxb-core']
                ], toModulePath)

        def modulePath = ['--module-path', toModulePath.join(":")]
        options.compilerArgs = modulePath + toPatch //+ ['--patch-module', "client.main=" + files(sourceSets.test.java.srcDirs).asPath]
    }
}
task copyDeps {
    //noinspection GroovyAssignabilityCheck
    doFirst {
        def args = compileJava.options.compilerArgs
        def idx = args.indexOf('--module-path')
        if (idx >= 0) {
            def modulePath = args[idx + 1].split(":")
            def classpathDeps = compileJava.classpath.filter { item -> !modulePath.contains(item.toPath().toAbsolutePath().toString()) }
            println(buildDir)
            def mp = buildDir.toPath().resolve("lib").resolve("mp")
            Files.createDirectories(mp)
            def cp = buildDir.toPath().resolve("lib").resolve("cp")
            Files.createDirectories(cp)
            def ignore = ['lombok']
            modulePath.each { path ->
                File file = file(path)
                if (!ignore.any { item -> file.getName().contains(item) }) {
                    Files.copy(file.toPath(), mp.resolve(file.getName()))
                }
            }
            classpathDeps.asPath.split(":").each { path ->
                File file = file(path)
                Files.copy(file.toPath(), cp.resolve(file.getName()))
            }
        }

    }
}
compileJava.finalizedBy copyDeps
test.finalizedBy jacocoTestReport
jar {
    enabled = true
}
sourceSets {
    // for java 9+ jigsaw startup
    main {
        output.resourcesDir = "build/classes/java/main"
    }
}


repositories {
    mavenCentral()
}


ext {
    springCloudVersion = 'Finchley.SR1'
    junitVersion = '5.2.0'
}
configurations {


    testCompile {
        // ACHTUNG! без этого будут сыпаться ошибки, также будет ошибка если slf4j в module-path
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
}
test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
    doFirst {
        def toClasspathList = ['ribbon-loadbalancer',
                               "ribbon-core",
                               "ribbon-transport",
                               "ribbon-httpclient",
                               "stax-api",
                               "java-xml",
                               "spring-aop",
                               "aopalliance",
                               "ribbon",
                               "xmlpull",
                               "bson",
                               //будет ошибка если slf4j в module-path, может там потребоваться если будет зависимость в module-info
                               "slf4j",
                               "mongodb-driver",
                               "mongodb-driver-core",
                               "jsonassert",
                               "android-json ",
                               "xpp3_min",
                               "jsr305",
                               "javax.annotation-api"]
        def toModulePath = createCompileArgsWithClasspath(toClasspathList, classpath.asPath)
        def toPatch = createCompileArgsWithPatchArgs(
                [
                        'hamcrest-core': ['hamcrest-library'],
                        'jaxb.impl': ['jaxb-core']
                ], toModulePath)

        def modulePath = ['--module-path', toModulePath.join(":")]
        jvmArgs = modulePath + toPatch
    }

}
jar {
    manifest {
        attributes 'Main-Class': 'com.example.front.FrontApplication'
    }
}
bootJar {
    mainClassName = 'com.example.front.FrontApplication'
}
dependencies {

    testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.cloud:spring-cloud-starter-openfeign')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')


    compile 'javax.xml.bind:jaxb-api'
    compile 'com.sun.xml.ws:jaxws-tools'
    compile 'com.sun.activation:javax.activation'
    compileOnly('org.projectlombok:lombok')

    compile 'org.slf4j:slf4j-api:1.7.25'
    testCompileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('io.projectreactor:reactor-test')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
